'use server';
/**
 * @fileOverview This flow enables the chatbot to answer questions using an admin-provided knowledge base.
 *
 * - chatbotAnswersQuestions - A function that accepts a question string and returns an answer string.
 * - ChatbotAnswersQuestionsInput - The input type for the chatbotAnswersQuestions function.
 * - ChatbotAnswersQuestionsOutput - The return type for the chatbotAnswersQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ChatbotAnswersQuestionsInputSchema = z.object({
  question: z.string().describe('The question to be answered by the chatbot.'),
  knowledgeBase: z.string().optional().describe('Admin provided knowledge base as string.'),
});
export type ChatbotAnswersQuestionsInput = z.infer<typeof ChatbotAnswersQuestionsInputSchema>;

const ChatbotAnswersQuestionsOutputSchema = z.object({
  answer: z.string().describe('The answer generated by the chatbot.'),
});
export type ChatbotAnswersQuestionsOutput = z.infer<typeof ChatbotAnswersQuestionsOutputSchema>;

export async function chatbotAnswersQuestions(input: ChatbotAnswersQuestionsInput): Promise<ChatbotAnswersQuestionsOutput> {
  return chatbotAnswersQuestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'chatbotAnswersQuestionsPrompt',
  input: {schema: ChatbotAnswersQuestionsInputSchema},
  output: {schema: ChatbotAnswersQuestionsOutputSchema},
  prompt: `You are a helpful chatbot. Use the following knowledge base, if provided, to answer the user's question. If the knowledge base is not provided, use your general knowledge to answer the question.\n\nKnowledge Base:\n{{{knowledgeBase}}}\n\nQuestion: {{{question}}}`,
});

const chatbotAnswersQuestionsFlow = ai.defineFlow(
  {
    name: 'chatbotAnswersQuestionsFlow',
    inputSchema: ChatbotAnswersQuestionsInputSchema,
    outputSchema: ChatbotAnswersQuestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
